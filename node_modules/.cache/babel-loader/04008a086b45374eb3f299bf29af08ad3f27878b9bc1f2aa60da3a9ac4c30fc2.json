{"ast":null,"code":"var _jsxFileName = \"/Users/jinaldave/Projects/pathfinder/src/PathfindingVisualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { aStar } from './astar';\nimport './Node.css'; // optional styling for nodes\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUM_ROWS = 20;\nconst NUM_COLS = 40;\nconst START_NODE = {\n  row: 5,\n  col: 5\n};\nconst END_NODE = {\n  row: 15,\n  col: 30\n};\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === START_NODE.row && col === START_NODE.col,\n    isEnd: row === END_NODE.row && col === END_NODE.col,\n    isWall: false,\n    isVisited: false,\n    gCost: Infinity,\n    hCost: Infinity,\n    fCost: Infinity,\n    previousNode: null\n  };\n};\nconst createGrid = () => {\n  const grid = [];\n  for (let row = 0; row < NUM_ROWS; row++) {\n    const currentRow = [];\n    for (let col = 0; col < NUM_COLS; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\nexport default function PathfindingVisualizer() {\n  _s();\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    setGrid(createGrid());\n  }, []);\n  const handleVisualizeAStar = () => {\n    // Grab references to start and end nodes\n    const startNode = grid[START_NODE.row][START_NODE.col];\n    const endNode = grid[END_NODE.row][END_NODE.col];\n    const {\n      visitedNodesInOrder,\n      path\n    } = aStar(grid, startNode, endNode);\n\n    // Animate visited nodes\n    animateVisited(visitedNodesInOrder, path);\n  };\n  function animateVisited(visitedNodesInOrder, path) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        // Once done visiting, animate path\n        setTimeout(() => {\n          animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeDiv = document.getElementById(`node-${node.row}-${node.col}`);\n        if (nodeDiv) {\n          nodeDiv.className += ' node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n  function animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        const nodeDiv = document.getElementById(`node-${node.row}-${node.col}`);\n        if (nodeDiv) {\n          nodeDiv.className += ' node-path';\n        }\n      }, 50 * i);\n    }\n  }\n  function renderGrid() {\n    return grid.map((row, rowIdx) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((node, nodeIdx) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            id: `node-${node.row}-${node.col}`,\n            className: `node \n                  ${node.isStart ? 'node-start' : ''}\n                  ${node.isEnd ? 'node-end' : ''}\n                `\n          }, nodeIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this);\n        })\n      }, rowIdx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleVisualizeAStar,\n      children: \"Visualize A*\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: renderGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(PathfindingVisualizer, \"w1YSakViRD9z3AUkL5Qso5coyFg=\");\n_c = PathfindingVisualizer;\nvar _c;\n$RefreshReg$(_c, \"PathfindingVisualizer\");","map":{"version":3,"names":["React","useState","useEffect","aStar","jsxDEV","_jsxDEV","NUM_ROWS","NUM_COLS","START_NODE","row","col","END_NODE","createNode","isStart","isEnd","isWall","isVisited","gCost","Infinity","hCost","fCost","previousNode","createGrid","grid","currentRow","push","PathfindingVisualizer","_s","setGrid","handleVisualizeAStar","startNode","endNode","visitedNodesInOrder","path","animateVisited","i","length","setTimeout","animatePath","node","nodeDiv","document","getElementById","className","renderGrid","map","rowIdx","children","nodeIdx","id","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["/Users/jinaldave/Projects/pathfinder/src/PathfindingVisualizer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { aStar } from './astar';\nimport './Node.css'; // optional styling for nodes\n\nconst NUM_ROWS = 20;\nconst NUM_COLS = 40;\nconst START_NODE = { row: 5, col: 5 };\nconst END_NODE = { row: 15, col: 30 };\n\nconst createNode = (row, col) => {\n  return {\n    row,\n    col,\n    isStart: row === START_NODE.row && col === START_NODE.col,\n    isEnd: row === END_NODE.row && col === END_NODE.col,\n    isWall: false,\n    isVisited: false,\n    gCost: Infinity,\n    hCost: Infinity,\n    fCost: Infinity,\n    previousNode: null,\n  };\n};\n\nconst createGrid = () => {\n  const grid = [];\n  for (let row = 0; row < NUM_ROWS; row++) {\n    const currentRow = [];\n    for (let col = 0; col < NUM_COLS; col++) {\n      currentRow.push(createNode(row, col));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nexport default function PathfindingVisualizer() {\n  const [grid, setGrid] = useState([]);\n\n  useEffect(() => {\n    setGrid(createGrid());\n  }, []);\n\n  const handleVisualizeAStar = () => {\n    // Grab references to start and end nodes\n    const startNode = grid[START_NODE.row][START_NODE.col];\n    const endNode = grid[END_NODE.row][END_NODE.col];\n    const { visitedNodesInOrder, path } = aStar(grid, startNode, endNode);\n\n    // Animate visited nodes\n    animateVisited(visitedNodesInOrder, path);\n  };\n\n  function animateVisited(visitedNodesInOrder, path) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        // Once done visiting, animate path\n        setTimeout(() => {\n          animatePath(path);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeDiv = document.getElementById(`node-${node.row}-${node.col}`);\n        if (nodeDiv) {\n          nodeDiv.className += ' node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n\n  function animatePath(path) {\n    for (let i = 0; i < path.length; i++) {\n      setTimeout(() => {\n        const node = path[i];\n        const nodeDiv = document.getElementById(`node-${node.row}-${node.col}`);\n        if (nodeDiv) {\n          nodeDiv.className += ' node-path';\n        }\n      }, 50 * i);\n    }\n  }\n\n  function renderGrid() {\n    return grid.map((row, rowIdx) => {\n      return (\n        <div key={rowIdx} className=\"row\">\n          {row.map((node, nodeIdx) => {\n            return (\n              <div\n                key={nodeIdx}\n                id={`node-${node.row}-${node.col}`}\n                className={`node \n                  ${node.isStart ? 'node-start' : ''}\n                  ${node.isEnd ? 'node-end' : ''}\n                `}\n              ></div>\n            );\n          })}\n        </div>\n      );\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={handleVisualizeAStar}>Visualize A*</button>\n      <div style={{ marginTop: '20px' }}>{renderGrid()}</div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}